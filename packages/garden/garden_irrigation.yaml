
#================
#=== Automations
#================
automation:

  #============================================================
  #=== Set next run time when schedule enabled or time changed
  #============================================================
  - alias: Irrigation - Set next run time when schedule enabled or time changed
    initial_state: on
    trigger:
      - platform: state
        entity_id:
          - input_boolean.cycle1_enable
          - input_boolean.cycle2_enable
        to: 'on'

      - platform: state
        entity_id:
          - input_select.cycle1_schedule_time
          - input_select.cycle2_schedule_time
    
      - platform: state
        entity_id:
          - input_select.cycle1_watering_days
          - input_select.cycle2_watering_days
    
    action:
      - service: input_datetime.set_datetime
        data_template:
          entity_id: >
            {% if 'cycle1' in trigger.entity_id %}
              input_datetime.cycle1_next_run_time
            {% else %}
              input_datetime.cycle2_next_run_time
            {% endif %}
          date: >
            {% if 'cycle1' in trigger.entity_id %}
              {% set time = states('input_select.cycle1_schedule_time') %}
            {% else %}
              {% set time = states('input_select.cycle2_schedule_time') %}
            {% endif %}
            {% if now().strftime('%H:%M') < time %}
              {{ as_timestamp(now()) | timestamp_custom("%Y-%m-%d") }}
            {% else %}
              {{ (as_timestamp(now()) + 24 * 3600 ) | timestamp_custom("%Y-%m-%d") }}
            {% endif %}
          time: >
            {% if 'cycle1' in trigger.entity_id %}
              {{ states('input_select.cycle1_schedule_time') }}
            {% else %}
              {{ states('input_select.cycle2_schedule_time') }}
            {% endif %}

    
#==================================================================
#=== Run irrigation cycles at the right time and on the right days
#==================================================================

  #=== Cycle 1
  - alias: Irrigation - Run Cycle 1
    initial_state: 'on'
    trigger:
      - platform: time_pattern
        minutes: 00
        seconds: 00

    condition:   
      - condition: template
        value_template: >
          {{ now().strftime('%Y-%m-%d %H:%M:00') == states('input_datetime.cycle1_next_run_time') }}

      - condition: state
        entity_id: input_boolean.cycle1_enable
        state: 'on'

    action:
      - service: script.irrigation_run_a_cycle
        data_template:
          cycle: '1'

      - service: script.update_next_runtime
        data_template:
          cycle: '1'

  #=== Cycle 2
  - alias: Irrigation - Run Cycle 2
    initial_state: 'on'
    trigger:
      - platform: time_pattern
        minutes: 00
        seconds: 00

    condition:    
      - condition: template
        value_template: >
          {{ now().strftime('%Y-%m-%d %H:%M:00') == states('input_datetime.cycle2_next_run_time') }}

      - condition: state
        entity_id: input_boolean.cycle2_enable
        state: 'on'

    action:
      - service: script.irrigation_run_a_cycle
        data_template:
          cycle: '2'

      - service: script.update_next_runtime
        data_template:
          cycle: '2'


  #======================
  # Run A Cycle Manually
  #======================
  - alias: Irrigation - Run a cycle manually
    initial_state: on
    trigger:
      - platform: state
        entity_id: 
        - input_boolean.cycle1_manual_run
        - input_boolean.cycle2_manual_run
        from: 'off'
        to: 'on'

    condition:
      #=== Don't run if the other cycle is already running
      - condition: template
        value_template: >
          {% if trigger.entity_id == 'input_boolean.cycle1_manual_run' %}
            {{ states('sensor.cycle2_running') == 'Not running' }}
          {% else %}
            {{ states('sensor.cycle1_running') == 'Not running' }}
          {% endif %}

    action:
      #=== Update progress in ui
      - service: input_text.set_value
        data_template:
          entity_id: >
            {% if trigger.entity_id == 'input_boolean.cycle1_manual_run' %}
              input_text.cycle1_current_zone
            {% else %}
              input_text.cycle2_current_zone
            {% endif %}
          value: 'Initialising...'

      #=== Make sure nothing in the system is running
      #=== Turn off valves
      - service: homeassistant.turn_off  
        data_template:
          entity_id: group.irrigation_switches

      #=== turn off scripts
      - service: homeassistant.turn_off
        entity_id: script.irrigation_run_a_cycle

      - service: homeassistant.turn_off
        entity_id: script.irrigation_irrigate_a_zone

      # #=== Save the current state of both cycle_enabled booleans
      - service_template: >
          {% if is_state('input_boolean.cycle1_enable', 'on') %}
            input_boolean.turn_on
          {% else %}
            input_boolean.turn_off
          {% endif %}
        data:
          entity_id: input_boolean.cycle1_enable_saved_state

      - service_template: >
          {% if is_state('input_boolean.cycle2_enable', 'on') %}
            input_boolean.turn_on
          {% else %}
            input_boolean.turn_off
          {% endif %}
        data:
          entity_id: input_boolean.cycle2_enable_saved_state

      #=== Disable both programmes
      - service: homeassistant.turn_off
        entity_id:
        - input_boolean.cycle1_enable
        - input_boolean.cycle2_enable

      #=== Run a cycle
      - service: script.irrigation_run_a_cycle
        data_template:
          cycle: >
            {% if trigger.entity_id == 'input_boolean.cycle1_manual_run' %}
              1
            {% else %}
              2
            {% endif %}

      #=== Wait until script is finished
      - wait_template: "{{ is_state('script.irrigation_run_a_cycle', 'off') }}"

      #=== Turn off both manual run booleans (in case one was turned on
      #=== while the other was already running)
      - service: homeassistant.turn_off  
        entity_id:
        - input_boolean.cycle1_manual_run
        - input_boolean.cycle2_manual_run

      # #=== Restore the previous state of both cycle_enabled booleans
      - service_template: >
          {% if is_state('input_boolean.cycle1_enable_saved_state', 'on') %}
            input_boolean.turn_on
          {% else %}
            input_boolean.turn_off
          {% endif %}
        data:
          entity_id: input_boolean.cycle1_enable

      - service_template: >
          {% if is_state('input_boolean.cycle2_enable_saved_state', 'on') %}
            input_boolean.turn_on
          {% else %}
            input_boolean.turn_off
          {% endif %}
        data:
          entity_id: input_boolean.cycle2_enable


  #=======================
  # Cancel A Manual Cycle
  #=======================
  - alias: Irrigation - Cancel a manual cycle
    initial_state: on
    trigger:
      - platform: state
        entity_id: 
        - input_boolean.cycle1_manual_run
        - input_boolean.cycle2_manual_run
        from: 'on'
        to: 'off'

    action:
      #=== Turn off valves
      - service: homeassistant.turn_off  
        data_template:
          entity_id: group.irrigation_switches

      #=== Turn off scripts
      - service: homeassistant.turn_off
        entity_id: script.irrigation_run_a_cycle

      - service: homeassistant.turn_off
        entity_id: script.irrigation_irrigate_a_zone

      #=== Cancel the timer
      - service: timer.cancel
        data_template:
          entity_id: >
            {% if trigger.entity_id == 'input_boolean.cycle1_manual_run' %}
              timer.cycle1_zone_duration
            {% else %}
              timer.cycle2_zone_duration
            {% endif %}
        
      #=== Update progress in ui
      - service: homeassistant.turn_off
        data_template:
          entity_id: >
            {% if trigger.entity_id == 'input_boolean.cycle1_manual_run' %}
              input_boolean.cycle1_running
            {% else %}
              input_boolean.cycle2_running
            {% endif %}

      - service: input_text.set_value
        data_template:
          entity_id: >
            {% if trigger.entity_id == 'input_boolean.cycle1_manual_run' %}
              input_text.cycle1_current_zone
            {% else %}
              input_text.cycle2_current_zone
            {% endif %}
          value: 'None'


  #===================================================
  #=== Update the last time an irrigation cycle ended
  #===================================================
  - alias: Irrigation - Update the last time a cycle ended
    initial_state: on
    trigger:
      - platform: state
        entity_id: group.irrigation_switches
        to: 'off'
        for: '00:00:05'

    action:
      - service: input_datetime.set_datetime
        data_template:
          entity_id: input_datetime.last_irrigated_time
          date: >
            {{ as_timestamp(now()) | timestamp_custom("%Y-%m-%d") }}
          time: >
            {{ as_timestamp(now()) | timestamp_custom("%H:%M") }}


#============
#=== Scripts
#============
script:

  #==========================
  #=== Script to run a cycle
  #=== is passed:
  #===   {{ cycle }}
  #==========================
  irrigation_run_a_cycle:
    sequence:

      #=== Only continue if no cycle is running
      - condition: state
        entity_id: 'sensor.cycle1_running'
        state: 'Not running'

      - condition: state
        entity_id: 'sensor.cycle2_running'
        state: 'Not running'

      #=== Update ui to show cycle is running
      - service: homeassistant.turn_on
        data_template:  
          entity_id: input_boolean.cycle{{ cycle }}_running

      #=== Call the script to irrigate zone 1
      - service: script.irrigation_irrigate_a_zone
        data_template:
          cycle: '{{ cycle }}'
          zone: '1'

      #=== Wait for script.irrigation_irrigate_a_zone to end
      - wait_template: "{{ is_state('script.irrigation_irrigate_a_zone', 'off') }}"

      #=== Call the script to irrigate zone 2
      - service: script.irrigation_irrigate_a_zone
        data_template:
          cycle: '{{ cycle }}'
          zone: '2'

      #=== Wait for script.irrigation_irrigate_a_zone to end
      - wait_template: "{{ is_state('script.irrigation_irrigate_a_zone', 'off') }}"
      
      #=== Call the script to irrigate zone 3
      - service: script.irrigation_irrigate_a_zone
        data_template:
          cycle: '{{ cycle }}'
          zone: '3'

      #=== Wait for script.irrigation_irrigate_a_zone to end
      - wait_template: "{{ is_state('script.irrigation_irrigate_a_zone', 'off') }}"
      
      #=== Call the script to irrigate zone 4
      - service: script.irrigation_irrigate_a_zone
        data_template:
          cycle: '{{ cycle }}'
          zone: '4'

      #=== Wait for script.irrigation_irrigate_a_zone to end
      - wait_template: "{{ is_state('script.irrigation_irrigate_a_zone', 'off') }}"

      #=== Call the script to irrigate zone 5
      - service: script.irrigation_irrigate_a_zone
        data_template:
          cycle: '{{ cycle }}'
          zone: '5'

      #=== Wait for script.irrigation_irrigate_a_zone to end
      - wait_template: "{{ is_state('script.irrigation_irrigate_a_zone', 'off') }}"

      #=== Call the script to irrigate zone 6
      - service: script.irrigation_irrigate_a_zone
        data_template:
          cycle: '{{ cycle }}'
          zone: '6'

      #=== Wait for script.irrigation_irrigate_a_zone to end
      - wait_template: "{{ is_state('script.irrigation_irrigate_a_zone', 'off') }}"

      #=== Call the script to irrigate zone 7
      - service: script.irrigation_irrigate_a_zone
        data_template:
          cycle: '{{ cycle }}'
          zone: '7'

      #=== Wait for script.irrigation_irrigate_a_zone to end
      - wait_template: "{{ is_state('script.irrigation_irrigate_a_zone', 'off') }}"

      #=== Call the script to irrigate zone 8
      - service: script.irrigation_irrigate_a_zone
        data_template:
          cycle: '{{ cycle }}'
          zone: '8'

      #=== Wait for script.irrigation_irrigate_a_zone to end
      - wait_template: "{{ is_state('script.irrigation_irrigate_a_zone', 'off') }}"

      #=== Call the script to irrigate zone 9
      - service: script.irrigation_irrigate_a_zone
        data_template:
          cycle: '{{ cycle }}'
          zone: '9'

      #=== Wait for script.irrigation_irrigate_a_zone to end
      - wait_template: "{{ is_state('script.irrigation_irrigate_a_zone', 'off') }}"

      #=== Call the script to irrigate zone 10
      - service: script.irrigation_irrigate_a_zone
        data_template:
          cycle: '{{ cycle }}'
          zone: '10'

      #=== Wait for script.irrigation_irrigate_a_zone to end
      - wait_template: "{{ is_state('script.irrigation_irrigate_a_zone', 'off') }}"

      #=== Call the script to irrigate zone 11
      - service: script.irrigation_irrigate_a_zone
        data_template:
          cycle: '{{ cycle }}'
          zone: '11'

      #=== Wait for script.irrigation_irrigate_a_zone to end
      - wait_template: "{{ is_state('script.irrigation_irrigate_a_zone', 'off') }}"

      #=== Call the script to irrigate zone 12
      - service: script.irrigation_irrigate_a_zone
        data_template:
          cycle: '{{ cycle }}'
          zone: '12'

      #=== Wait for script.irrigation_irrigate_a_zone to end
      - wait_template: "{{ is_state('script.irrigation_irrigate_a_zone', 'off') }}"

      #=== Call the script to irrigate zone 13
      - service: script.irrigation_irrigate_a_zone
        data_template:
          cycle: '{{ cycle }}'
          zone: '13'

      #=== Wait for script.irrigation_irrigate_a_zone to end
      - wait_template: "{{ is_state('script.irrigation_irrigate_a_zone', 'off') }}"

      #=== Call the script to irrigate zone 14
      - service: script.irrigation_irrigate_a_zone
        data_template:
          cycle: '{{ cycle }}'
          zone: '14'

      #=== Wait for script.irrigation_irrigate_a_zone to end
      - wait_template: "{{ is_state('script.irrigation_irrigate_a_zone', 'off') }}"

      #=== Call the script to irrigate zone 15
      - service: script.irrigation_irrigate_a_zone
        data_template:
          cycle: '{{ cycle }}'
          zone: '15'

      #=== Wait for script.irrigation_irrigate_a_zone to end
      - wait_template: "{{ is_state('script.irrigation_irrigate_a_zone', 'off') }}"

      #=== Call the script to irrigate zone 16
      - service: script.irrigation_irrigate_a_zone
        data_template:
          cycle: '{{ cycle }}'
          zone: '16'

      #=== Wait for script.irrigation_irrigate_a_zone to end
      - wait_template: "{{ is_state('script.irrigation_irrigate_a_zone', 'off') }}"

      #=== Update progress in ui
      - service: input_text.set_value
        data_template:
          entity_id: input_text.cycle{{ cycle }}_current_zone
          value: 'None'

      - service: homeassistant.turn_off  
        data_template:
          entity_id: input_boolean.cycle{{ cycle }}_running

      #=== Turn off schedule if run 'Once' selected
      - service_template: >
            {% if states('input_select.cycle' + cycle + '_watering_days') == 'Once' %}
              input_boolean.turn_off
            {% else %}
              input_boolean.turn_on
            {% endif %}
        data_template:
          entity_id: input_boolean.cycle{{ cycle }}_enabled


  #==============================
  #=== Script to irrigate a zone
  #=== is passed:
  #===   {{ cycle }}
  #===   {{ zone }}
  #==============================
  irrigation_irrigate_a_zone:
    sequence:

      #=== Don't continue if switch is unavailable
      - condition: template
        value_template: >
          {{ states('switch.zone' + zone) != 'unavailable' }}

##### what is the impact of this weather adjustment in the formula ????????????????   ##########
      #=== Don't continue if duration is zero
      - condition: template
        value_template: >
            {% if is_state('input_boolean.cycle' + cycle + '_use_weather_adjustment', 'on') %}
              {% set n = states('input_number.adjusted_cycle' + cycle + '_zone' + zone + '_duration')  | int %}
            {% else %}
              {% set n = states('input_number.cycle' + cycle + '_zone' + zone + '_duration')  | int %}
            {% endif %}
            {{ n != 0 }}
          
      # #=== Call the script to set the sonoff PULSETIME
      # - service: script.set_sonoff_pulsetime
      #   data_template:
      #     cycle: '{{ cycle }}'
      #     zone: '{{ zone }}'

      #=== Wait 5 seconds for good measure to ensure previous zone is completly finished
      - delay: "00:00:05"

      #=== Update progress in ui
      - service: input_text.set_value
        data_template:
          entity_id: 'input_text.cycle{{ cycle }}_current_zone'
          value: '{{ zone }}'

      - service: switch.turn_on
        data_template:
          entity_id: switch.zone{{ zone }}
         
      #=== Start timer for zone duration
      - service: timer.start
        data_template:
          entity_id: timer.cycle{{ cycle }}_zone_duration
          duration: >
            {% set duration = states('input_number.cycle' + cycle + '_zone' + zone + '_duration')  | int %}
            {% set adj_duration = states('input_number.adjusted_cycle' + cycle + '_zone' + zone + '_duration')  | int %}
            {% if is_state('input_boolean.cycle' + cycle + '_use_weather_adjustment', 'on') %}
              00:{{ '%02i' | format(adj_duration) }}:00
            {% else %}
              00:{{ '%02i' | format(duration) }}:00
            {% endif %}

      - wait_template: >
          {% set entity = 'timer.cycle' + cycle + '_zone_duration' %}
          {{ is_state(entity , 'idle') }}

      - service: switch.turn_off
        data_template:
          entity_id: switch.zone{{ zone }}

      #=== Update progress in ui
      - service: input_text.set_value
        data_template:
          entity_id: input_text.cycle{{ cycle }}_current_zone
          value: 'Changing zone...'

      #=== Be sure the current zone switch is off
      - wait_template: >
          {% set entity = 'switch.zone' + zone %}
          {{ is_state(entity , 'off') }}


  #==================================
  #=== Script to update next runtime
  #=== is passed:
  #===   {{ cycle }}
  #==================================
  update_next_runtime:
    sequence:
      - service: input_datetime.set_datetime
        data_template:
          entity_id: input_datetime.cycle{{ cycle }}_next_run_time
          date: >
            {% if states('input_select.cycle' + cycle + '_watering_days') == 'Daily' %}
              {{ (as_timestamp(now() ) + 24 * 3600 ) | timestamp_custom("%Y-%m-%d") }}
            {% elif states('input_select.cycle' + cycle + '_watering_days') == 'Alternate' %}  
              {{ (as_timestamp(now() ) + 48 * 3600 ) | timestamp_custom("%Y-%m-%d") }}
            {% else %}
              {{ states('input_datetime.cycle' + cycle + '_next_run_time').split(' ')[0] }}
            {% endif %}
          time: >
            {{ states('input_select.cycle' + cycle + '_schedule_time') }}
